For this task, we will be using Python with Flask as the web framework. We will also use Jinja2 for HTML templating. The architecture will consist of three main files:

1. `app.py`: This is the main entry point of the application. It will contain the Flask application and the route for generating the random number.
2. `templates/index.html`: This is the HTML template that will be rendered by the Flask application. It will display the random number.
3. `requirements.txt`: This file will list all the Python dependencies that need to be installed for the application to run.

Let's start with the `app.py` file:

app.py
```python
from flask import Flask, render_template
import random

app = Flask(__name__)

@app.route('/')
def home():
    # Generate a random number
    number = random.randint(1, 100)
    # Render the index.html template with the random number
    return render_template('index.html', number=number)

if __name__ == '__main__':
    app.run(debug=True)
```

In this file, we import Flask and the `render_template` function. We also import the `random` module to generate random numbers. We then create a Flask application and define a route for the home page (`/`). When this route is accessed, we generate a random number between 1 and 100, and render the `index.html` template with this number.

Next, let's create the `index.html` file:

templates/index.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>Random Number Generator</title>
</head>
<body>
    <h1>Random Number Generator</h1>
    <p>Your random number is: {{ number }}</p>
</body>
</html>
```

In this file, we define a simple HTML page with a title and a paragraph. The paragraph displays the random number that is passed to the template from the Flask application.

Finally, let's create the `requirements.txt` file:

requirements.txt
```txt
Flask==1.1.2
```

This file lists Flask as the only dependency for this application. To run the application, one would need to install Flask using this file with the command `pip install -r requirements.txt`.

This completes the architecture for a super simple HTML random number generation website using Python and Flask.